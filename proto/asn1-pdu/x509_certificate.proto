syntax = "proto2";

import "asn1_pdu.proto";
import "asn1_universal_types.proto";

package x509_certificate;

// See RFC 5280, 4.1 & 4.1.1.
message X509Certificate {
  required TBSCertificate tbs_certificate = 1;
  required SignatureAlgorithm signature_algorithm = 2;
  required SignatureValue signature_value = 3;
}

// See RFC 5280, 4.1 & 4.1.2.
message TBSCertificate {
  optional asn1_pdu.PDU pdu = 1;
  required TBSCertificateSequence value = 2;
}

message TBSCertificateSequence {
  required Version version = 1;
  required SerialNumber serial_number = 2;
  required SignatureAlgorithm signature_algorithm = 3;
  required Name issuer = 4;
  required Validity validity = 5;
  required Name subject = 6;
  required SubjectPublicKeyInfo subject_public_key_info = 7;
  optional UniqueIdentifier issuer_unique_id = 8;
  optional UniqueIdentifier subject_unique_id = 9;
  optional Extensions extensions = 10;
}

// See RFC 5280, 4.1 & 4.1.2.1.
message Version {
  // If |pdu| is present, encode |Version| as an arbitraty pdu.
  optional asn1_pdu.PDU pdu = 1;
  required VersionNumber value = 2;
}

// X.509 Certificates define three versions (RFC 5280, 4.1 & 4.1.2.1).
enum VersionNumber {
  v1 = 0;
  v2 = 1;
  v3 = 2;
}

// See RFC 5280, 4.1 & 4.1.2.2.
message SerialNumber {
  // If |pdu| is present, encode |SerialNumber| as an arbitraty pdu.
  optional asn1_pdu.PDU pdu = 1;
  required asn1_universal_types.Integer value = 2;
}

// RFC 5280 4.1, 4.1.2.4, 4.1.2.6: Subject and Issuer contain |Name|.
message Name {
  // If |pdu| is present, encode |Name| as an arbitraty pdu.
  optional asn1_pdu.PDU pdu = 1;
  required asn1_pdu.PDU value = 2;
  // TODO(dhalawi@gmail.com): switch the required
  // field to encompass a valid |Name| value.
}

// See RFC 5280, 4.1 & 4.1.2.5.
message Validity {
  optional asn1_pdu.PDU pdu = 1;
  required ValiditySequence value = 2;
}

message ValiditySequence {
  required NotBefore not_before = 2;
  required NotAfter not_after = 3;
}

// See RFC 5280, 4.1 & 4.1.2.5.
message NotBefore {
  optional asn1_pdu.PDU pdu = 1;
  required TimeChoice value = 2;
}

// See RFC 5280, 4.1 & 4.1.2.5.
message NotAfter {
  optional asn1_pdu.PDU pdu = 1;
  required TimeChoice value = 2;
}

// See RFC 5280, 4.1 & 4.1.2.5.
message TimeChoice {
  optional asn1_universal_types.UTCTime utc_time = 1;
  required asn1_universal_types.GeneralizedTime generalized_time = 2;
}

// See RFC 5280, 4.1 & 4.1.2.7.
message SubjectPublicKeyInfo {
  // If |pdu| is present, encode |SubjectPublicKeyInfo| as an arbitraty pdu.
  optional asn1_pdu.PDU pdu = 1;
  required SubjectPublicKeyInfoSequence value = 2;
}

message SubjectPublicKeyInfoSequence {
  required AlgorithmIdentifierSequence algorithm_identifier = 2;
  required SubjectPublicKey subject_public_key = 3;
}

// See RFC 5280, 4.1 & 4.1.2.7.
message SubjectPublicKey {
  // If |pdu| is present, encode |SubjectPublicKey| as an arbitraty pdu.
  optional asn1_pdu.PDU pdu = 1;
  required asn1_universal_types.BitString value = 2;
}

// See RFC 5280, 4.1 & 4.1.2.8.
message UniqueIdentifier {
  // If |pdu| is present, encode |UniqueIdentifier| as an arbitraty pdu.
  optional asn1_pdu.PDU pdu = 1;
  required asn1_universal_types.BitString value = 2;
}

// See RFC 5280, 4.1 & 4.1.2.9.
message Extensions {
  // If |pdu| is present, encode |Extensions| as an arbitraty pdu.
  required asn1_pdu.PDU pdu = 1;
  required asn1_pdu.PDU value = 2;
  // TODO(dhalawi@gmail.com): switch the required
  // field to encompass a valid |Extensions| value.
}

// See RFC 5280, 4.1 & 4.1.1.2.
message SignatureAlgorithm {
  // If |pdu| is present, encode |SignatureAlgorithm| as an arbitraty pdu.
  optional asn1_pdu.PDU pdu = 1;
  required AlgorithmIdentifierSequence value = 2;
}

// See RFC 5280, 4.1.1.2.
message AlgorithmIdentifierSequence {
  // TODO(dhalawi@google.com):
  // encode a correct |AlgorithmIdentifierSequence|.
  required asn1_pdu.PDU object_identifier = 1;
  required asn1_pdu.PDU parameters = 2;
}

// See RFC 5280, 4.1 & 4.1.1.3.
message SignatureValue {
  // If |pdu| is present, encode |SignatureValue| as an arbitraty pdu.
  optional asn1_pdu.PDU pdu = 1;
  required asn1_universal_types.BitString value = 2;
}